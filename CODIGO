package gestioninventario;
import java.util.regex.Pattern;//Extrae cierta información de un texto por medio de patrones específicos de búsqueda
import javax.swing.*; //Clases que permiten crear interfaces gráficas de usuario
import java.awt.*; //permite hacer interfaces gráficas mediante interfases de interaccion con el usuario, boton,menu,texto
import java.awt.event.ActionEvent; //Evento de acción, como cuando el usuario hace clic en el botón
import java.awt.event.ActionListener; //Recibd eventos de la accion 

public class GestionInventario {

    
    public static void main(String[] args) {
          System.out.println("Bienvenido al sistema de gestion de inventario");}
          
}
class Usuario{
          private int id;
          private String nombre;
          private String apellido;
          private String tipoidentificacion;
          private String numerodocumento;
          private String direccion;
          private String telefono;
          private String email;
          private boolean estadoactivo;
          
          public Usuario(){};

        public Usuario(int id, String nombre, String apellido, String tipoidentificacion, String numerodocumento, String direccion, String telefono, String email, boolean estadoactivo) {
            this.id = id;
            this.nombre = nombre;
            this.apellido = apellido;
            this.tipoidentificacion = tipoidentificacion;
            this.numerodocumento = numerodocumento;
            this.direccion = direccion;
            this.telefono = telefono;
            this.email = email;
            this.estadoactivo = estadoactivo;
        }
           public int getId() {
            return id;}

            public void setId(int id) {
            this.id = id;}
    
           public String getnombre(){
               return nombre;}
    
           public void setnombre(String nombre){
               this.nombre =nombre;}
           
            public String getapellido(){
               return apellido;}
    
           public void setapellido(String apellido){
               this.apellido =apellido;}
           
             public String gettipoidentificacion(){
               return tipoidentificacion;}
    
           public void settipoidentificacion(String tipoidentificacion){
               this.tipoidentificacion =tipoidentificacion;}
           
            public String getnumerodocumento(){
               return numerodocumento;}
    
           public void setnumerodocumento(String numerodocumento){
               this.numerodocumento =numerodocumento;}
           
           public String getdireccion(){
               return direccion;}
    
           public void setdireccion(String direccion){
               this.direccion = direccion;}
           
            public String gettelefono(){
               return telefono;}
    
           public void settelefono(String telefono){
               this.telefono = telefono;}
           
           public String getemail(){
               return email;}
    
           public void setemail(String email){
               this.email = email;}
           
           public boolean getestadoactivo(){
               return estadoactivo;}
    
           public void setestadoactivo(boolean estadoactivo){
               this.estadoactivo = estadoactivo;}
        }
        class UsuarioRepositorio{
         private static Usuario[] usuarios = new Usuario[100];  // Array estático
         private static int contador = 0; 
         
        //CREAR NUEVO USUARIO
        public static void crearUsuario(Usuario usuario) {
        if (contador < usuarios.length) {
            usuarios[contador] = usuario;
            contador++;
            System.out.println("Usuario creado correctamente.");
        } else {
            System.out.println("No se pueden agregar más usuarios, el array está lleno.");
        }
    }
        //MODIFICAR EL USUARIO
        public static void modificarUsuario(Usuario usuarioModificado) {
        for (int i = 0; i < contador; i++) {
            if (usuarios[i].getemail().equals(usuarioModificado.getemail())) {
                usuarios[i] = usuarioModificado;
                System.out.println("Usuario modificado correctamente.");
                return;
            }
        }
        System.out.println("Usuario no encontrado.");
    }
        //Usuario por correo electronico
        public static Usuario obtenerUsuarioPorEmail(String email) {
        for (int i = 0; i < contador; i++) {
            if (usuarios[i].getemail().equals(email)) {
                return usuarios[i];
            }
        }
        return null;  // Usuario no encontrado
    }
        //Lista de usuarios
        public static Usuario[] obtenerListadoUsuarios() {
        Usuario[] usuariosListado = new Usuario[contador];
        System.arraycopy(usuarios, 0, usuariosListado, 0, contador);// Copiar los usuarios agregados en el array statico
        return usuariosListado;
    }
        //Activar un usuario
        public static void activarUsuario(String email) {
        Usuario usuario = obtenerUsuarioPorEmail(email);
        if (usuario != null) {
            usuario.setEstadoActivo(true);
            System.out.println("Usuario activado.");
        } else {
            System.out.println("Usuario no encontrado.");
        }
    }
            //Inactivar un usuario
        public static void inactivarUsuario(String email) {
        Usuario usuario = obtenerUsuarioPorEmail(email);
        if (usuario != null) {
            usuario.setEstadoActivo(false);
            System.out.println("Usuario inactivado.");
        } else {
            System.out.println("Usuario no encontrado.");
        }
    }
}
        class UsuarioServicio{
            private UsuarioRepositorio usuarioRepositorio;
            //Constructor
            public UsuarioServicio() {
        this.usuarioRepositorio = new UsuarioRepositorio();
    }
            //Validar usuario
            public boolean validarUsuario(Usuario usuario, String password) {
        // Validar el formato del correo
        if (!validarEmail(usuario.getEmail())) {
            System.out.println("Correo electrónico no es válido.");
            return false;
        }
        //Validar contraseña
         if (!validarPassword(password)) {
            System.out.println("Contraseña no cumple con los requisitos.");
            return false;
        }

        System.out.println("Usuario validado correctamente.");
        return true;
    }
    private boolean validarEmail(String email) {
        // validar el formato del correo
        String regexEmail = "^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$";
        Pattern pattern = Pattern.compile(regexEmail);
        return pattern.matcher(email).matches();
    }

        //validar la contraseña
    private boolean validarPassword(String password) {
    String regexPassword = "^.{6,}$";  // Al menos 6 caracteres de cualquier tipo
    Pattern pattern = Pattern.compile(regexPassword);
    return pattern.matcher(password).matches();
}
    class LoginFrame extends JFrame {
    private JTextField emailField;
    private JPasswordField passwordField;
    private UsuarioServicio usuarioServicio;

    public LoginFrame(UsuarioServicio usuarioServicio) {
        this.usuarioServicio = usuarioServicio;

        setTitle("Login");// Configuracion del JFrame
        setSize(350, 250);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        JPanel panel = new JPanel(new GridLayout(3, 2));// Panel principal

        JLabel emailLabel = new JLabel("Correo:");  // Componentes de la interfaz
        emailField = new JTextField();
        JLabel passwordLabel = new JLabel("Contraseña:");
        passwordField = new JPasswordField();
        JButton loginButton = new JButton("Ingresar");

        panel.add(emailLabel);    // Añadir componentes al panel
        panel.add(emailField);
        panel.add(passwordLabel);
        panel.add(passwordField);
        panel.add(new JLabel());  // Espacio vacío
        panel.add(loginButton);

        add(panel);

        // Accion del boton "Ingresar"
        loginButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String email = emailField.getText();
                String password = new String(passwordField.getPassword());

                Usuario usuario = usuarioServicio.obtenerUsuarioPorEmail(email);
                if (usuario != null && usuarioServicio.validarUsuario(usuario, password)) {
                    // Usuario validado correctamente
                    MainFrame mainFrame = new MainFrame(usuario);
                    mainFrame.setVisible(true);
                    dispose();  // Cierra ventana del login
                } else {
                    JOptionPane.showMessageDialog(null, "Usuario o contraseña incorrectos.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        });
    }}
}
  class MainFrame extends JFrame{
      private Usuario usuario;
   public MainFrame(Usuario usuario) {
        this.usuario = usuario;

        // Configuración del JFrame
        setTitle("Bienvenido");
        setSize(400, 200);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        // Panel principal
        JPanel panel = new JPanel(new BorderLayout());

        // Mensaje de bienvenida
        JLabel welcomeLabel = new JLabel("Bienvenido, " + usuario.getNombre() + " " + usuario.getApellido(), SwingConstants.CENTER);
        panel.add(welcomeLabel, BorderLayout.CENTER);

        // Botón de cerrar sesión
        JButton logoutButton = new JButton("Cerrar sesión");
        panel.add(logoutButton, BorderLayout.SOUTH);

        // Añadir panel al JFrame
        add(panel);

        // Acción del botón "Cerrar sesión"
        logoutButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                LoginFrame loginFrame = new LoginFrame(new UsuarioServicio());
                loginFrame.setVisible(true);
                dispose();  // Cerrar ventana principal
            }
        });
    }
  } 
  class Main {
    public static void main(String[] args) {
        // Crear la instancia del servicio de usuario
        UsuarioServicio usuarioServicio = new UsuarioServicio();

        // Mostrar la pantalla de login
        LoginFrame loginFrame = new LoginFrame(usuarioServicio);
        loginFrame.setVisible(true);
    }
}
